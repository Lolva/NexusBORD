Instructions for Setting Up Servlet 

1. We will need several packages that may not be present on your machine:
	(If they are present you can try skipping this, I had to install)
	- In Eclipse go to: 
		Help -> Install New Software
	- In the 'Work With' field, input:
		http://download.eclipse.org/releases/mars
	- Name prompt will appear, give it whatever name you want
	- Under 'Web, XML, Java EE and OSGi Enterprise Development' add these:
		- Eclipse Java EE Developer Tools
		- Eclipse Java Web Developer Tools
		- Eclipse Web Developer Tools
		- JST Server Adapters
		- JST Server Adapters Extensions
	
	- Once selected, click next and follow prompts to install
	Note: It's possible it will fail to download and request additional
		packages to be installed, agree and continue

2. For eclipse to run our server we'll use Tomcat
	- Go to:
		https://tomcat.apache.org/download-80.cgi
	- Go to version 8.5.42 -> Core -> 64 bit binary
	- Download this package and extract the zip
	
	!-- Below step is potentially not needed, if you want to skip this 
		then be sure to select Tomcat 8.5 when we are selecting
		the server to run, no idea if it will work --!
	- Unfortunately, this version isn't natively supported
		by Eclipse so we'll need to trick it by changing 
		the version number
		- Go to the directory where you extracted tomcat
		- Go into the 'lib' folder 
		- Right click on 'Catalina.jar' and open with 7zip
		- Select 'Open Archive' and go to:
			\org\apache\catalina\util\ServerInfo.properties
		- Open this file and change these lines to:
			server.info=Apache Tomcat/8.0.0
			server.number=8.0.0
		- Note: Make sure that the changes are saved here
			(7zip will give a pop-up if you did)

3. Setting up our project
	- Now that we have the environment setup, we'll 
		make use of example code from TutorialsPoint 
		to show proof of concept
	- First we'll create a new project in Eclipse
		- When selecting project type go to:
			Web\Dynamic Web Project
		- Name it whatever you want but make sure to
			keep hitting next until the last page
			and check 'Generate web.xml deployment descriptor'
		Note: I allow the Java EE Perspective but I don't know
			what it does

4. Adding Libraries to Project
		- Download the binary zip from these two links
			http://commons.apache.org/proper/commons-fileupload/download_fileupload.cgi
			
			http://commons.apache.org/proper/commons-io/download_io.cgi
			
		- Take the jar file from each of these and copy them into our project here:
			projectName\WebContent\WEB-INF\lib\	
		- Now return to your tomcat download, add the jar found here to the same place:
			\lib\servlet-api.jar
			
5. Adding code examples
	- We'll be using the code provided here:
		https://www.tutorialspoint.com/servlets/servlets-file-uploading.htm
	- Start by adding the Java code so make a new Java class in this directory:
		projectName/Java Resources/src
	- Next add the HTML portion to a new HTML file here:
		projectName\WebContent\index.html
	- Lastly, there are two pieces to the XML, add both to this file:
		projectName\WEB-INF\web.xml
		- Note: Be sure to look at this code, a one-to-one copy 
			will not work, it is self-explanatory though
		- Note: When opening a xml switch to the 'Source' tab
			found on the bottom left of the xml page window
	- In the XML file there will now be a directory you added,
		this will be the server file location for saving so change
		to an area you can test
		- Note: For Firefox and Chrome the directory MUST end with a '\'
			whereas Eclipse and IE do not care if it's present
			
6. Running the Example
	- We'll set our test to an actual browser by going to:
		Window -> Web Browser 
	- Go to run the project
	- Right click project, Run As... Run on Server
	- On the pop-up, select Apache folder and pick Tomcat 8.0
		- Browse to the Tomcat download and select finish
	- Program should now run
		Note: If port 8080 is in use error, then happy hunting
			https://stackoverflow.com/questions/39632667/how-to-kill-the-process-currently-using-a-port-on-localhost-in-windows
		